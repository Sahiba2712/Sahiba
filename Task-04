{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled5.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyPJDHLbPgWhWHIJ/BzeP4+L",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Sahiba2712/Sahiba/blob/master/Untitled5.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kPI587ztoMD8"
      },
      "source": [
        "#Task-04\n",
        "##GO_STP_12366\n",
        "###Goeduhub Technologies"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MzTzDuW2oXDf"
      },
      "source": [
        "1.Import the numpy package under the name np and Print the numpy version and the configuration"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ncaioCtpoLAb",
        "outputId": "ff1d9239-7747-44eb-f6fd-2280f692e09a"
      },
      "source": [
        "import numpy as np\n",
        "print(np.__version__)"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.19.5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0wQ83GIxpH7d"
      },
      "source": [
        "2. Create a null vector of size 10"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DS6U8EQ3pWsI",
        "outputId": "88121f39-0cad-4b22-bae5-a04c670641de",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "np.zeros(10)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PZGdOpRmpgvg"
      },
      "source": [
        " 3. Create Simple 1-D array and check type and check data types in array"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "X78SPCiDpt2B",
        "outputId": "9ad81831-7ff7-44a1-8800-54bef79e3270",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "n=np.arange(0,10)\n",
        "print(type(n))\n",
        "n.dtype"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'numpy.ndarray'>\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "dtype('int64')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FEfKl8vkqOdC"
      },
      "source": [
        " 4. How to find number of dimensions, bytes per element and bytes of memory used?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wiSsGnKtqYn1",
        "outputId": "701cf6bd-c652-45fd-a273-cd0a9b0c99fd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "n=np.arange(0,10)\n",
        "n.ndim\n",
        "n.itemsize\n",
        "n.nbytes"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "80"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nSGBBZO7qrXB"
      },
      "source": [
        " 5. Create a null vector of size 10 but the fifth value which is 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IBEdZkOLqwFy",
        "outputId": "d937455b-8c64-4229-ad60-f7738f2f1b3b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "null = np.zeros(10)\n",
        "null[4] = 1\n",
        "print(null)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "M8sKkYH3q6xq"
      },
      "source": [
        " 6. Create a vector with values ranging from 10 to 49"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qyGQJvBRq-1W",
        "outputId": "8476d212-5858-4b43-dc17-dc2da92d055b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "a=np.arange(10,50)\n",
        "print(a)"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33\n",
            " 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "25HfCbexrGYv"
      },
      "source": [
        "7. Reverse a vector (first element becomes last)"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TibW4v1TrQgT",
        "outputId": "59fe4d01-143c-40a1-9664-459e68b03606",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "b = np.arange(10,50)\n",
        "c=b[::-1]\n",
        "print (c)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26\n",
            " 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1PpYo5CorjCx"
      },
      "source": [
        " 8. Create a 3x3 matrix with values ranging from 0 to 8"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SmgePrf5rmus",
        "outputId": "3ab239c6-1ae0-4f8c-a14e-33f63a75fb25",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "a= np.arange(0,9)\n",
        "a.reshape(3,3)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[0, 1, 2],\n",
              "       [3, 4, 5],\n",
              "       [6, 7, 8]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UWnh82MrsDH4"
      },
      "source": [
        " 9. Find indices of non-zero elements from [1,2,0,0,4,0]"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dC50yv8esDXc",
        "outputId": "d831bbd1-e1f2-48e4-b4fa-954275db9b93",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "a=[1,2,0,0,4,0]\n",
        "np.nonzero(a)"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 4]),)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VXBMwl1lsbUH"
      },
      "source": [
        " 10. Create a 3x3 identity matrix"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pUF8eCfIsUtP",
        "outputId": "75fe03c2-81c0-434e-9444-721df5bf4ff0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "np.identity(3)\n",
        "np.eye(3,3)"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[1., 0., 0.],\n",
              "       [0., 1., 0.],\n",
              "       [0., 0., 1.]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ML8ZEfHHshsK"
      },
      "source": [
        "11. Create a 3x3x3 array with random values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "q96KunF6shzr",
        "outputId": "c1457ea1-3e55-401f-fa85-d69e14fd16b8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "np.random.random((3,3,3))"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[0.85333061, 0.20996034, 0.22753473],\n",
              "        [0.62119943, 0.83567518, 0.92802478],\n",
              "        [0.22338024, 0.03088551, 0.56857404]],\n",
              "\n",
              "       [[0.09054557, 0.29984244, 0.40211777],\n",
              "        [0.25999508, 0.34450213, 0.86792699],\n",
              "        [0.21105358, 0.18059202, 0.07340893]],\n",
              "\n",
              "       [[0.63414683, 0.93289223, 0.85313539],\n",
              "        [0.41390891, 0.85097847, 0.71109508],\n",
              "        [0.22387841, 0.03382215, 0.33566902]]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AzAZEXqEsyY8"
      },
      "source": [
        " 12. Create a 10x10 array with random values and find the minimum and maximum values"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ehDO9a_psyiN",
        "outputId": "00eb2a32-c513-4b6e-f1f4-acba3dbc7ee1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "a=np.random.random((10,10))\n",
        "print(a)\n",
        "#for min\n",
        "e=np.min(a)\n",
        "print('minimum value:',e)\n",
        "#for max\n",
        "d=np.max(a)\n",
        "print('maximum value:',d)"
      ],
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.86271359 0.19874454 0.62098502 0.5254479  0.39501253 0.86153315\n",
            "  0.70770841 0.22712922 0.05075078 0.08584908]\n",
            " [0.12349205 0.27364821 0.16149093 0.3453732  0.38226225 0.49332635\n",
            "  0.86619929 0.13996521 0.62987048 0.38709152]\n",
            " [0.46963553 0.37890267 0.71097823 0.99765966 0.50734785 0.38386177\n",
            "  0.34089314 0.63748618 0.92996052 0.33539205]\n",
            " [0.6630077  0.85423182 0.420377   0.98481538 0.99895245 0.7496451\n",
            "  0.25486213 0.21966748 0.93632986 0.33237172]\n",
            " [0.45271215 0.4174878  0.04958179 0.54550989 0.78607067 0.78176386\n",
            "  0.25638143 0.52335816 0.40246675 0.85764622]\n",
            " [0.39312173 0.66261178 0.63862847 0.64545388 0.36431961 0.00318882\n",
            "  0.78663523 0.05892003 0.89991191 0.94421024]\n",
            " [0.39423503 0.62369098 0.47720237 0.69303418 0.79627647 0.34104473\n",
            "  0.38604302 0.95556657 0.89176849 0.54482819]\n",
            " [0.11387259 0.34952322 0.19265475 0.29070325 0.66802956 0.73335133\n",
            "  0.67291259 0.96382421 0.44001498 0.30880224]\n",
            " [0.82040163 0.39853458 0.75644173 0.0231073  0.21173919 0.50763357\n",
            "  0.09028334 0.37960743 0.79805233 0.5293866 ]\n",
            " [0.40496987 0.50474012 0.44204322 0.77196369 0.70792918 0.60337294\n",
            "  0.56825798 0.14823953 0.33300314 0.96329601]]\n",
            "minimum value: 0.0031888197886204006\n",
            "maximum value: 0.9989524465040917\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CDkFejnytrd5"
      },
      "source": [
        " 13. Create a random vector of size 30 and find the mean value"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4KXJNCy8trmM",
        "outputId": "40d4d3a7-1a87-4e1e-b139-a08b1e6b746f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "e=np.random.random((5,6))\n",
        "print(e)\n",
        "np.mean(e)"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.75705955 0.19860349 0.46802219 0.55625293 0.31414874 0.04832725]\n",
            " [0.15473186 0.17469033 0.12178834 0.35930803 0.54775993 0.59932362]\n",
            " [0.41587239 0.15003455 0.52565565 0.57714714 0.64601919 0.04041035]\n",
            " [0.56022677 0.43863912 0.21568339 0.78191022 0.89632048 0.53833212]\n",
            " [0.065415   0.95311056 0.30094701 0.14189825 0.17326141 0.86121286]]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.419403757592571"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gSFiwYdOuHww"
      },
      "source": [
        " 14. Create a 2d array with 1 on the border and 0 inside"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RzQ5CnjeuH8D",
        "outputId": "0d277002-eb76-4040-e557-8d4413583727",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "g = np.ones((5,5))\n",
        "g[1:4, 1:4] = 0\n",
        "print (g)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1. 1. 1. 1. 1.]\n",
            " [1. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 1.]\n",
            " [1. 0. 0. 0. 1.]\n",
            " [1. 1. 1. 1. 1.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-EyBhguJuXCi"
      },
      "source": [
        " 15. How to add a border (filled with 0's) around an existing array?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LPA1L7T0uXJu",
        "outputId": "bc9ab9b6-b1c3-41ac-dc0b-b66fba5b2413",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "g = np.ones((5,5))\n",
        "g[:1, :] = 0\n",
        "g[:, :1] = 0\n",
        "g[4:, :] = 0\n",
        "g[:, 4:] = 0\n",
        "print (g)"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0. 0. 0. 0. 0.]\n",
            " [0. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 0.]\n",
            " [0. 1. 1. 1. 0.]\n",
            " [0. 0. 0. 0. 0.]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E_QyKDDOus_v"
      },
      "source": [
        " 16. How to Accessing/Changing specific elements, rows, columns, etc in Numpy array?\n",
        "Example - [[ 1 2 3 4 5 6 7] [ 8 9 10 11 12 13 14]]\n",
        "Get 13, get first row only, get 3rd column only, get [2, 4, 6], replace 13 by 20"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c3vtyScdutGG",
        "outputId": "42d6384a-af40-4a04-a322-c9f3cfd927f1",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "i = np.arange(1,15).reshape(2,7)\n",
        "# To get 13\n",
        "g=i[1,5]\n",
        "print(g)\n",
        "# To get first row only\n",
        "h=i[0,:]\n",
        "print (h)\n",
        "# to get third column only\n",
        "j=i[:,2]\n",
        "print(j)\n",
        "# To get [2, 4, 6]\n",
        "k=i[0,1::2]\n",
        "print(k)\n",
        "# replace 13 by 20\n",
        "l=i[1,5] = 20\n",
        "print(l)\n",
        "print(i)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "13\n",
            "[1 2 3 4 5 6 7]\n",
            "[ 3 10]\n",
            "[2 4 6]\n",
            "20\n",
            "[[ 1  2  3  4  5  6  7]\n",
            " [ 8  9 10 11 12 20 14]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hm4W-5tcvo2a"
      },
      "source": [
        " 17. How to Convert a 1D array to a 2D array with 2 rows"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T9zGD-GXvpBk",
        "outputId": "73fc3d41-fd74-486b-c427-a87891d76937",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "a=np.arange(1,17)\n",
        "print(a)\n",
        " \n",
        " \n",
        "a.reshape(2,8)"
      ],
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16]\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 1,  2,  3,  4,  5,  6,  7,  8],\n",
              "       [ 9, 10, 11, 12, 13, 14, 15, 16]])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bI43yfIQwZ83"
      },
      "source": [
        " 18. Create the following pattern without hardcoding. Use only numpy and the below input array a.\n",
        "Input:\n",
        "a = np.array([1,2,3])` Desired Output:\n",
        "#> array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BEzhStVKwhCn",
        "outputId": "baf40998-7ed1-4734-a802-40984f765a97",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "a = np.array([1, 2, 3])\n",
        "np.append(np.repeat(a,3), np.tile(a,3))"
      ],
      "execution_count": 59,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TXv9-aExwo24"
      },
      "source": [
        " 19. Write a program to show how Numpy taking less memory compared to Python List?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qeU2__V1wurZ",
        "outputId": "05fb99fa-5c02-4d54-bb38-318b9ab068de",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "l = range(100)\n",
        "a = 2\n",
        "import sys\n",
        "# Size of Python list\n",
        "sys.getsizeof(a) * len(l)\n",
        "# Size of numpy array\n",
        "al = np.arange(100)\n",
        "al.size * al.itemsize"
      ],
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "800"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oy5WpqR-w7qZ"
      },
      "source": [
        " 20. Write a program to show how Numpy taking less time compared to Python List?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7UxzFfLgw72S",
        "outputId": "2ecdc43d-b819-4e22-8b0e-d9e6825b8fcc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "import time\n",
        "import sys\n",
        "# Python List\n",
        "size = 10000000\n",
        "l1 = range(size)\n",
        "l2 = range(size)\n",
        "start = time.time()\n",
        "result = [(x * y) for x,y in zip(l1, l2)]\n",
        "print(\"Time taken by List: \", (time.time() - start), \"seconds\")\n",
        "# Numpy Array\n",
        "nl1 = np.arange(size)\n",
        "nl2 = np.arange(size)\n",
        "start1 = time.time()\n",
        "res = nl1 * nl2\n",
        "print(\"Time taken by numpy array: \", (time.time() - start1), \"seconds\")"
      ],
      "execution_count": 62,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Time taken by List:  1.3629422187805176 seconds\n",
            "Time taken by numpy array:  0.04097104072570801 seconds\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}
